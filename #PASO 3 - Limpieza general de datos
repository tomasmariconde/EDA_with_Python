#PASO 3 - Limpieza general de datos
#Filtramos las columnas del DataFrame para quedarnos con las siguientes solamente:
    #country (name)
    #year (year of protest)
    #region (country region)
    #protest (was there a protest in the relevant period?)
    #protestnumber (protest number in year)
    #startday
    #startmonth
    #startyear
    #endday
    #endmonth
    #endyear
    #protesterviolence (did protesters engage in violence against the state?)
    #location 
    #participants (number of participants)
    #staterespone1
    #staterespone2
    #staterespone3
    #staterespone4
    #staterespone5
    #staterespone6
    #staterespone7
df=df.loc[:,["country", "year", "region", "protest", "protestnumber", "startday", "startmonth", "startyear", "endday", "endmonth", "endyear", "protesterviolence", "location", "participants", "stateresponse1", "stateresponse2", "stateresponse3", "stateresponse4", "stateresponse5", "stateresponse6", "stateresponse7"]]    
print(df)

#Filtramos las columnas "region" y "year" para quedarnos con la region sudamericana y datos a partir del año 2009 (hasta el 2014)
df=df[df["region"]=="South America"]
df=df[df["year"]>=2009]
print(df)

#Eliminamos las columnas "stateresponse2", "stateresponse3", "stateresponse4", "stateresponse5", "stateresponse6" y "stateresponse7" debido a que solo nos interesa conocer las primeras reacciones de los estados ante los conflictos
df.drop("stateresponse2", axis=1, inplace=True)
df.drop("stateresponse3", axis=1, inplace=True)
df.drop("stateresponse4", axis=1, inplace=True)
df.drop("stateresponse5", axis=1, inplace=True)
df.drop("stateresponse6", axis=1, inplace=True)
df.drop("stateresponse7", axis=1, inplace=True)
print(df)

#Reestructuramos el DataFrame de modo que los valores contenidos en las columnas "startday", "startmonth" y "startyear" se agrupen bajo un nueva y unica columna llamada "startdate"
#En primer lugar, eliminamos los valores nulos de la columna "startyear"
df=df.dropna(subset=["startyear"])
print(df)
#En segundo lugar, convertimos el total de las columnas en int para quitar los decimales previo a agruparlas
df["startday"]=df.startday.apply(int)
df["startmonth"]=df.startmonth.apply(int)
df["startyear"]=df.startyear.apply(int)
print(df)
#Por ultimo, agrupamos las tres columnas bajo una nueva llamada "startdate" utilizando la funcion to_datetime
df["startdate"]=pd.to_datetime(df["startday"].apply(str) + "/" + df["startmonth"].apply(str) + "/" + df["startyear"].apply(str), format="%d/%m/%Y", infer_datetime_format=True, errors="coerce")
print(df)

#Reestructuramos el DataFrame de modo que los valores contenidos en las columnas "endday", "endmonth" y "endyear" se agrupen bajo un nueva y unica columna llamada "enddate"
#En primer lugar, convertimos el total de las columnas en int para quitar los decimales previo a agruparlas. No es necesario eliminar los valores nulos como hicimos anteriormenete ya que por esa accion quedaron eliminados en este caso también 
df["endday"]=df.endday.apply(int)
df["endmonth"]=df.endmonth.apply(int)
df["endyear"]=df.endyear.apply(int)
print(df)
#Luego agrupamos las tres columnas bajo una nueva llamada "enddate" utilizando la funcion to_datetime
df["enddate"]=pd.to_datetime(df["endday"].apply(str) + "/" + df["endmonth"].apply(str) + "/" + df["endyear"].apply(str), format="%d/%m/%Y", infer_datetime_format=True, errors="coerce")
print(df)

#Reiniciamos el indice a fin de poder trabajar en el siguiente paso con mayor comodidad
df.reset_index(level=0, inplace=True)
print(df)

#Eliminamos el indice anterior que se convirtio en columna y por tanto no nos sirve
df.drop("index", axis=1, inplace=True)
print(df)
